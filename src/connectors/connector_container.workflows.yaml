# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START workflows_connector_container]
# This workflow demonstrates how to use the Cloud Kubernetes Engine connector.
# The workflow creates a GKE cluster and then deletes it.
# Each of these steps waits until the long-running operation of creating or deleting the GKE
# cluster is completed.
# Expected successful output: "SUCCESS"

main:
  params: []
  steps:
  - init:
      assign:
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - cluster_zone: "us-central1-a"
      - cluster_id: "[fill in a cluster ID]"
      - cluster_full_name: ${"projects/" + project_id + "/locations/" + cluster_zone + "/clusters/" + cluster_id}
  - create_k8s_cluster:
      call: googleapis.container.v1.projects.zones.clusters.create
      args:
        projectId: ${project_id}
        zone: ${cluster_zone}
        body:
          cluster:
            name: ${cluster_id}
            initial_node_count: 1
          parent: ${"projects/" + project_id + "/locations/" + args.clusterZone}
  - assert_running:
      call: assert_cluster_status
      args:
        expected_status: "RUNNING"
        project_id: ${project_id}
        cluster_zone: ${cluster_zone}
        cluster_id: ${cluster_id}
        cluster_full_name: ${cluster_full_name}

  - delete_k8s_cluster:
      call: googleapis.container.v1.projects.zones.clusters.delete
      args:
        projectId: ${project_id}
        zone: ${cluster_zone}
        clusterId: ${cluster_id}
        name: ${cluster_full_name}
  - the_end:
      return: "SUCCESS"

assert_cluster_status:
  params: [expected_status, project_id, cluster_zone, cluster_id, cluster_full_name]
  steps:
  - get_cluster:
      call: googleapis.container.v1.projects.zones.clusters.get
      args:
        projectId: ${project_id}
        zone: ${cluster_zone}
        clusterId: ${cluster_id}
        name: ${cluster_full_name}
      result: cluster
  - compare:
      switch:
      - condition: ${cluster.status == expected_status}
        next: end
  - fail:
      raise: ${"Expected VM status is " + expected_status + ". Got " + cluster.status + " instead."}
# [END workflows_connector_container]
