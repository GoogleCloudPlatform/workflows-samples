# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START workflows_connector_pubsub]
# This workflow demonstrates how to use the Cloud Pub/Sub connector.
# The workflow creates a Pub/Sub topic, a new subscription to that new topic, publishes a new message to
# the topic, pulls the message from the subscription, and then deletes both
# the subscription and the topic.
# Expected successful output: "SUCCESS"

- init:
    assign:
    - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
    - topic: "[fill in a Pubsub topic name]"
    - subscription: "[fill in a Pubsub subscription name]"
    - message: {"hello": "world"}  # An object used as a secret.
    - base64Msg: ${base64.encode(json.encode(message))}
- create_topic:
    call: googleapis.pubsub.v1.projects.topics.create
    args:
      name: ${"projects/" + project + "/topics/" + topic}
- create_subscription_to_topic:
    call: googleapis.pubsub.v1.projects.subscriptions.create
    args:
      name: ${"projects/" + project + "/subscriptions/" + subscription}
      body:
        name: ${"projects/" + project + "/subscriptions/" + subscription}
        topic: ${"projects/" + project + "/topics/" + topic}
- publish_message_to_topic:
    call: googleapis.pubsub.v1.projects.topics.publish
    args:
      topic: ${"projects/" + project + "/topics/" + topic}
      body:
        messages:
        - data: ${base64Msg}
- pull_message:
    call: googleapis.pubsub.v1.projects.subscriptions.pull
    args:
      subscription: ${"projects/" + project + "/subscriptions/" + subscription}
      body:
        maxMessages: 1
    result: m
- check_message:
    switch:
    - condition: ${m.receivedMessages[0].message.data != base64Msg}
      next: failed
- delete_subscription:
    call: googleapis.pubsub.v1.projects.subscriptions.delete
    args:
      subscription: ${"projects/" + project + "/subscriptions/" + subscription}
- delete_topic:
    call: googleapis.pubsub.v1.projects.topics.delete
    args:
      topic: ${"projects/" + project + "/topics/" + topic}
- the_end:
    return: "SUCCESS"
- failed:
    raise: ${"got data:" + m.receivedMessages[0].message.data + " want data:" + base64Msg}
# [END workflows_connector_pubsub]
